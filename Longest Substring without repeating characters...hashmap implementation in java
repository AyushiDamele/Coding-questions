Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
#solution

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n,i,j,k,prevstart;
        n= s.length();
        int start=0,end=-1;
        int curlen=0,maxlen=0;
        HashMap<Character, Integer> hm=new HashMap<Character,Integer>();
        hm.clear();
        i=0;
        while(i<n)
        {
            if(hm.containsKey(s.charAt(i)))
            {
                curlen= i-start;
                if(maxlen<curlen){ maxlen=curlen; }
                prevstart=start;
                start=hm.get(s.charAt(i))+1;
                for(j=prevstart;j<start;j++)
                {
                    hm.remove(s.charAt(j));
                }
            }
            else
            {
                hm.put(s.charAt(i),i);
                i++;
            }
        }
        curlen=i-start;
        if(maxlen<curlen)
        {
            maxlen=curlen;
        }
        return maxlen;
        
    }
}
             
