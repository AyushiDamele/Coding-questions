https://leetcode.com/problems/median-of-two-sorted-arrays/submissions/
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

#solution

#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        int m=nums1.size();
        int n=nums2.size();
        int x=(m+n+1)/2;
        if(m>n)
        {
            vector<int> temp;
            temp=nums1;
            nums1=nums2;
            nums2=temp;
        }
        m=nums1.size();
        n=nums2.size();
        
        int mid , party;
        double ans;
        int start=0,end=m;
        while( start<=end )
        {
            mid=((start+end)/2 );
            party= (x-mid);
            if(mid>start && nums1[mid-1] > nums2[party])
            {
                end=mid-1;
            }
            else if(mid <end && nums2[party-1]> nums1[mid])
            {
                start=mid+1;
            }
            else
            {
                int maxleft=0;
                if(mid==0){  maxleft= nums2[party-1]; }
                else if(party==0){ maxleft=nums1[mid-1]; }
                else { maxleft=max(nums1[mid-1] , nums2[party-1]) ;  }
                if( (m+n)%2==1 )
                { ans=maxleft; }
                else
                {
                    int minright=0;
                    if(mid== m){ minright=nums2[party]; }
                    else if(party==n){ minright=nums1[mid];  }
                    else { minright=min(nums2[party] , nums1[mid]) ; }

                    ans= (maxleft+minright)/2.0;
                }
                
                break;
            }
        }
        
        return ans;
    }
};
