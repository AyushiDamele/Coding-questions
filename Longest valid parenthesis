https://leetcode.com/problems/longest-valid-parentheses/

# most efficient solution

class Solution {
public:
    int longestValidParentheses(string s) {
        int n=s.length(),i,j,open=0,close=0,maxlen1=0;
        for(i=0;i<n;i++)
        {
            if(s[i]=='('){ open++; }
            else{ close++; }
            if(open<close){ open=0,close=0; }
            else if(open==close){ maxlen1=max(maxlen1,2*close); }
        }
        open=0,close=0;
        for(i=n-1;i>=0;i--)
        {
            if(s[i]==')'){ open++; }
            else{ close++; }
            if(open <close) { open=0,close=0; }
            else if(open==close){ maxlen1=max(maxlen1,2*close); }
        }
        return maxlen1;
        
    }
};

#stack based solution

class Solution {
public:
    int longestValidParentheses(string s) {
        int n=s.length(),maxlen=0,i;
        stack<int> st;
        st.push(-1);
        for(i=0;i<n;i++)
        {
            if(s[i]=='(')
            {
                st.push(i);
            }
            else
            {
                st.pop();
                if(st.empty()){ st.push(i); }
                else
                {
                   maxlen=max(maxlen, i-st.top());
    
                }
                            
            }
        }
        return maxlen;
        
    }
};
