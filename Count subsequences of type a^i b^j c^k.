https://practice.geeksforgeeks.org/problems/count-subsequences-of-type-ai-bj-ck/0

Given a string s, the task is to count number of subsequences of the form aibjck, where i >= 1, j >=1 and k >= 1.

Note: Two subsequences are considered different if the set of array indexes picked for the 2 subsequences are different.

Examples:

Input  : abbc
Output : 3
Subsequences are abc, abc and abbc

Input  : abcabc
Output : 7
Subsequences are abc, abc, abbc, aabc
abcc, abc and abc


Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains a string s.

Output:
For each test case in a new line print the required output.

Constraints:
1<=T<=100
1<=Length of string <=100

#solution
#Apprach: count the a's before each b and c's after each b. then find the number of possible combinations.

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n,m,p,i,j;
        string s;
        cin >> s;
        n=s.length();
        int a[n+1],c[n+1];
        a[0]=0,c[0]=0,m=0;
        for(i=1;i<=n;i++)
        {
            if(s[i-1]=='a')
            {
                a[i]=a[i-1]+1;
                c[i]=c[i-1];
            }
            else if(s[i-1]=='b')
            {
                a[i]=a[i-1];
                c[i]=c[i-1];
                m++;
            }
            else
            {
                a[i]=a[i-1];
                c[i]=c[i-1]+1;
            }
           // cout <<"i= "<<i-1<<" a[i]="<<a[i]<<" c[i]="<<c[i]<<endl;
        }
        long long sum=0;
        int as[m],cs[m],k;
        j=0;
        for(i=0;i<n;i++)
        {
            if(s[i]=='b')
            {
                as[j]=a[i+1];
                cs[j]=c[n]-c[i+1];
             //   cout << j<<" as="<<as[j]<<" cs="<<cs[j]<<endl;
                j++;
            }
        }
        long long x;
        for(i=0;i<m;i++)
        {
            for(j=i;j<m;j++)
            {
                k=as[i];
                p=cs[j];
               // cout <<"(1<<0)-1 = "<<((1<<0)-1)<<endl;
               
                x= ((1<<k)-1)*((1<<p)-1);
                if(j!=i)
                {
                    x=x*(1<<(j-i-1));
                }
                sum=sum+x;
               // cout <<"i="<<i<<" j="<<j<<" x= "<<x<<endl;
            }
        }
        cout << sum<<endl;
    }
    return 0;
}
