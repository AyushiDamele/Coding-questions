https://leetcode.com/problems/reverse-nodes-in-k-group/submissions/

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.

#solution

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
bool checkforknodes(ListNode *head, int k)
{
    int count=1;
    while(head!=0 && count <k)
    {
        count++;
        head=head->next;
    }
    if(count==k && head){ return true; }
    return false;
}
ListNode* reverse(ListNode *head,int k)
{
    ListNode *cur,*next=0,*prev=0;
    cur=head;
    int count=0;
    if(checkforknodes(head,k)==false)
    {
        prev=head;
    }
    else
    {
        while(cur!=0 && count <k)
        {
            next=cur->next;
            cur->next=prev;
            prev=cur;
            cur=next;
            count++;
        }
        
        if(next)
        {
            head->next= reverse(next, k);
        }
       
    }
     return prev;
}
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        head=reverse(head,k);
        return head;
        
    }
};
