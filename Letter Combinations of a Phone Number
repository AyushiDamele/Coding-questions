link: https://leetcode.com/problems/letter-combinations-of-a-phone-number/

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]

#solution 

#include<bits/stdc++.h>
using namespace std;
vector<string> ans;
void generatestrings(string digits,int index,string cur,string a[])
{
    if(index==digits.length())
    {
       // cout <<"cur is "<<cur<<endl;
        if(cur.length()>0)
        { ans.push_back(cur); }
        return;
    }
    else
    {
        int i=(int)digits[index]-48;
        for(int j=0;j<a[i].length();j++)
        {
            cur=cur+a[i][j];
            generatestrings(digits,index+1,cur,a);
            cur.erase(cur.length()-1,cur.length());
        }
    }
}
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        
        string cur="";
        ans.clear();
        int index=0;
        string a[10];
        a[1]="",a[0]="",a[2]="abc",a[3]="def",a[4]="ghi",a[5]="jkl",a[6]="mno",a[7]="pqrs",
        a[8]="tuv",a[9]="wxyz";
        generatestrings(digits,index,cur,a);
        //cout <<ans.size()<<endl;
        return ans;
    }
};
