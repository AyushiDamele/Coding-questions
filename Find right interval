https://leetcode.com/problems/find-right-interval/

Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the "right" of i.

For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the "right" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.

Note:
You may assume the interval's end point is always bigger than its start point.
You may assume none of these intervals have the same start point.
Example 1:
Input: [ [1,2] ]

Output: [-1]

Explanation: There is only one interval in the collection, so it outputs -1.
Example 2:
Input: [ [3,4], [2,3], [1,2] ]

Output: [-1, 0, 1]

Explanation: There is no satisfied "right" interval for [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point;
For [1,2], the interval [2,3] has minimum-"right" start point.
Example 3:
Input: [ [1,4], [2,3], [3,4] ]

Output: [-1, 2, -1]

Explanation: There is no satisfied "right" interval for [1,4] and [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point.

#solution

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */

struct node
{
    int start,end,index;
};
bool compare(node lhs,node rhs)
{
    if(lhs.start==rhs.start){ return lhs.end<rhs.end; }
    else { return lhs.start <rhs.start; }
}
class Solution {
public:
    vector<int> findRightInterval(vector<Interval>& intervals) {
        int n=intervals.size();
        int i,j,k;
        node a[n];
        for(i=0;i<n;i++)
        {
            a[i].start=intervals[i].start;
            a[i].end=intervals[i].end;
            a[i].index = i;
        }
        sort(a,a+n,compare);
        vector<int> ans(n);
        for(i=0;i<n;i++)
        {
            int start,end;
            start=i+1,end=n-1;
            int floor=-1;
            while(start< n && start <=end)
            {
                int mid=(start+end)/2;
                if(a[i].end <= a[mid].start )
                {
                    floor=a[mid].index;
                    end=mid-1;
                }
                else
                {
                    start=mid+1;
                }
            }
            ans[a[i].index]=floor;
        }
        return ans;
    }
};
